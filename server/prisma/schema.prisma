generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id              String   @id @default(uuid())
  name            String
  email           String   @unique
  password        String?
  username        String @unique
  department      String?
  dob             String?
  joiningYear     String?
  avatar          String?
  contactNumber   String?
  passwordUpdated Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("admin")
}

model Attendance {
  id                    String   @id @default(uuid())
  student              Student  @relation(fields: [studentId], references: [id])
  studentId            String
  subject              Subject  @relation(fields: [subjectId], references: [id])
  subjectId            String
  totalLecturesByFaculty Int     @default(0)
  lectureAttended       Int     @default(0)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@map("attendance")
  @@index([studentId, subjectId])
}

model Department {
  id             String    @id @default(uuid())
  department     String    @unique
  departmentCode String    @unique
  faculties      Faculty[]
  students       Student[]
  subjects       Subject[]
  studyMaterials StudyMaterial[]
  assignments    Assignment[]
  tests          Test[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@map("department")
}

model Faculty {
  id              String   @id @default(uuid())
  name            String
  email           String   @unique
  avatar          String?
  password        String @default("12345678")
  username        String @unique
  gender          String?
  designation     String
  department      String
  contactNumber   String?
  dob             String
  joiningYear     Int
  passwordUpdated Boolean  @default(false)
  studyMaterials StudyMaterial[]
  assignments    Assignment[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  departmentRef   Department @relation(fields: [department], references: [department])

  @@map("faculty")
  @@index([department])
}

model Marks {
  id        String   @id @default(uuid())
  exam      Test     @relation(fields: [examId], references: [id])
  examId    String
  student   Student  @relation(fields: [studentId], references: [id])
  studentId String
  marks     Int      @default(-1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("marks")
  @@index([examId, studentId])
}

model Notice {
  id        String   @id @default(uuid())
  topic     String
  date      String
  content   String
  from      String
  noticeFor String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notice")
}

model Student {
  id                  String       @id @default(uuid())
  name                String
  email               String       @unique
  avatar              String?
  password            String @default("abcdefgh")
  year                Int
  subjects            Subject[]    @relation("StudentToSubject")
  username            String @unique
  gender              String?
  fatherName          String?
  motherName          String?
  department          String
  section             String
  batch               String?
  contactNumber       String?
  fatherContactNumber String?
  dob                 String
  passwordUpdated     Boolean      @default(false)
  attendance          Attendance[]
  marks               Marks[]
  studyMaterials StudyMaterial[]
  assignments    Assignment[]
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  departmentRef       Department   @relation(fields: [department], references: [department])

  @@map("student")
  @@index([department, section, year])
}

model Subject {
  id            String       @id @default(uuid())
  subjectName   String @unique
  subjectCode   String
  department    String
  totalLectures Int         @default(10)
  year          String
  attendance    Attendance[]
  students      Student[]    @relation("StudentToSubject")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  departmentRef Department   @relation(fields: [department], references: [department])

  @@unique([subjectCode, department])
  @@map("subject")
  @@index([department, year])
}

model Test {
  id          String     @id @default(uuid())
  test        String
  subjectCode String
  department  String
  totalMarks  Int       @default(10)
  year        String
  section     String
  date        String
  marks       Marks[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  departmentRef Department @relation(fields: [department], references: [department])

  @@map("test")
  @@index([subjectCode, department, year, section])
}

model StudyMaterial {
  id          String     @id @default(uuid())
  material        String
  subjectCode String
  department  String
  year        String
  section     String
  title       String
  date        String
  createdAt   DateTime   @default(now())
  departmentRef Department @relation(fields: [department], references: [department])
  studentRef   Student?   @relation(fields: [studentId], references: [id])
  studentId    String?
  facultyRef   Faculty?   @relation(fields: [facultyId], references: [id])
  facultyId    String?

  @@map("study_material")
  @@index([subjectCode, department, year, section])
}

model Assignment {
  id          String   @id @default(uuid())
  title       String
  description String
  fileUrl     String
  subject     String
  year        Int
  department  String
  section     String
  dueDate     DateTime
  
  Student Student[]
  Faculty Faculty[]
  Department Department[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("assignment")
  @@index([title, subject, year, department, section])
}


model Feedback {
  id              String  @id @default(uuid()) @map("_id") 
  studentId       String  
  subjectCode     String  
  department      String  
  year            String  
  section         String  
  feedback        String  
  clarityRating   Int     
  knowledgeRating Int     
  presentationRating Int  
  helpfulnessRating Int   
  engagementRating Int     

  @@map("feedback")
}